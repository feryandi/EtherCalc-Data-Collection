// Generated by LiveScript 1.5.0
(function(){
  this.__MYSQL__ = null;
  this.include = function(){
    var db, env, ref$, mysqlPort, mysqlHost, mysqlPass, mysqlDb, dataDir, mysql, client;
    if (this.__MYSQL__) {
      return this.__MYSQL__;
    }
    db = {};
    env = process.env;
    ref$ = [env['MYSQL_PORT'], env['MYSQL_HOST'], env['MYSQL_PASS'], env['MYSQL_DB'], env['OPENSHIFT_DATA_DIR']], mysqlPort = ref$[0], mysqlHost = ref$[1], mysqlPass = ref$[2], mysqlDb = ref$[3], dataDir = ref$[4];
    mysql = require('mysql');
    client = client;
    dataDir == null && (dataDir = process.cwd());
    db.createConnection = function(mysqlSetting, cb){
      var client;
      client = mysql.createConnection(mysqlSetting);
      return client.connect(function(err){
        if (err) {
          console.log("MySQL error connecting: " + err + ".stack");
          client.end();
          cb("error");
          return;
        }
        console.log("MySQL connected as id " + client + ".threadId");
        client.end();
        cb("success");
      });
    };
    db.executeSQL = function(sql, mysqlSetting, cb){
      var client;
      client = mysql.createConnection(mysqlSetting);
      return client.connect(function(err){
        if (err) {
          console.log("MySQL error connecting: " + err + ".stack");
          client.end();
          return false;
        }
        console.log("MySQL connected as id " + client + ".threadId");
        console.log("SQL: " + sql);
        client.query(sql, function(error, results, fields){
          client.end();
          return cb(error, results);
        });
        return true;
      });
    };
    db.createTable = function(table_name, columns, mysqlSetting, cb){
      var colstring, i, i$, len$, col, sql;
      colstring = '(';
      i = 0;
      colstring += '`_id` int NOT NULL AUTO_INCREMENT,';
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ', ';
        }
        if (col.type === "CPKEY") {
          colstring += 'PRIMARY KEY (' + col.name.trim() + ') ';
        } else if (col.type === "CUNIQ") {
          colstring += 'UNIQUE KEY `muniq` (' + col.name.trim() + ') ';
        } else {
          colstring += '`' + col.name.trim() + '` ' + col.type + '(160)';
        }
        i += 1;
      }
      colstring += ', PRIMARY KEY (_id)';
      colstring += ')';
      sql = "CREATE TABLE " + table_name + " " + colstring;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return db.alterUnique(table_name, columns, mysqlSetting, function(error, results){
          return cb(error, results);
        });
      });
    };
    db.isExistTable = function(table_name, mysqlSetting, cb){
      var sql;
      sql = "SHOW TABLES LIKE '" + table_name + "'";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.getRowCount = function(table_name, mysqlSetting, cb){
      var sql;
      sql = "SELECT COUNT(*) FROM " + table_name;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.getColumns = function(table_name, mysqlSetting, cb){
      var sql;
      sql = "SHOW COLUMNS FROM " + table_name;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.getUniqueColumns = function(table_name, mysqlSetting, cb){
      var sql;
      sql = "SHOW COLUMNS FROM " + table_name + " WHERE `Key` = 'UNI'";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.getColumnsByName = function(table_name, column, mysqlSetting, cb){
      var sql;
      sql = "SHOW COLUMNS FROM " + table_name + " WHERE `Field` = '" + column + "'";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.selectData = function(table_name, col, val, mysqlSetting, cb){
      var sql;
      sql = "SELECT * FROM " + table_name + " WHERE " + col + " = '" + val + "'";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.selectNEData = function(table_name, col, val, mysqlSetting, cb){
      var sql;
      sql = "SELECT * FROM " + table_name + " WHERE " + col + " != '" + val + "'";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.selectWhereData = function(table_name, sel_col, where_cond, mysqlSetting, cb){
      var sql;
      sql = "SELECT " + sel_col + " FROM " + table_name + " WHERE " + where_cond;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.deleteData = function(table_name, con_col, con_val, mysqlSetting, cb){
      var sql;
      sql = "DELETE FROM " + table_name + " WHERE `" + con_col + "` = '" + con_val + "'";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.deleteWhereData = function(table_name, where_cond, mysqlSetting, cb){
      var sql;
      sql = "DELETE FROM " + table_name + " WHERE " + where_cond;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.dropTable = function(table_name, mysqlSetting, cb){
      var sql;
      sql = "DROP TABLE " + table_name;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.insertData = function(table_name, columns, data, mysqlSetting, cb){
      var colstring, i, i$, len$, col, datastring, jd, d, j$, len1$, dt, sql;
      colstring = '(';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ', ';
        }
        colstring += '`' + col.name.trim() + '`';
        i += 1;
      }
      colstring += ')';
      datastring = '(';
      jd = 1;
      console.log(data);
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        d = data[i$];
        i = 0;
        for (j$ = 0, len1$ = d.length; j$ < len1$; ++j$) {
          dt = d[j$];
          if (i > 0) {
            datastring += ', ';
          }
          datastring += '"' + db.escapeString(dt) + '"';
          i += 1;
        }
        datastring += ')';
        if (jd < data.length) {
          datastring += ', (';
        }
        jd += 1;
      }
      sql = "INSERT INTO " + table_name + " " + colstring + " VALUES " + datastring;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.insertDupData = function(table_name, columns, data, bkey, mysqlSetting, cb){
      var colstring, i, i$, len$, col, datastring, jd, d, j$, len1$, dt, sql;
      colstring = '(';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ', ';
        }
        colstring += '`' + col.name.trim() + '`';
        i += 1;
      }
      colstring += ')';
      datastring = '(';
      jd = 1;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        d = data[i$];
        i = 0;
        for (j$ = 0, len1$ = d.length; j$ < len1$; ++j$) {
          dt = d[j$];
          if (i > 0) {
            datastring += ', ';
          }
          datastring += '"' + db.escapeString(dt) + '"';
          i += 1;
        }
        datastring += ')';
        if (jd < data.length) {
          datastring += ', (';
        }
        jd += 1;
      }
      sql = "INSERT INTO " + table_name + " " + colstring + " VALUES " + datastring + " ON DUPLICATE KEY UPDATE " + bkey + " = VALUES(" + bkey + ")";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.insertDupMultiData = function(table_name, columns, data, mysqlSetting, cb){
      var assignstring, colstring, i, a, i$, len$, col, datastring, jd, d, j$, len1$, dt, sql;
      assignstring = "";
      colstring = '(';
      i = 0;
      a = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ', ';
        }
        if (a > 0 && !col.unique) {
          assignstring += ', ';
        }
        colstring += '`' + col.name.trim() + '`';
        if (!col.unique) {
          assignstring += '`' + col.name.trim() + '` = VALUES(`' + col.name.trim() + '`)';
          a += 1;
        }
        i += 1;
      }
      colstring += ')';
      datastring = '(';
      jd = 1;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        d = data[i$];
        i = 0;
        for (j$ = 0, len1$ = d.length; j$ < len1$; ++j$) {
          dt = d[j$];
          if (i > 0) {
            datastring += ', ';
          }
          datastring += '"' + db.escapeString(dt) + '"';
          i += 1;
        }
        datastring += ')';
        if (jd < data.length) {
          datastring += ', (';
        }
        jd += 1;
      }
      sql = "INSERT INTO " + table_name + " " + colstring + " VALUES " + datastring + " ON DUPLICATE KEY UPDATE " + assignstring;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        console.log(results);
        return cb(error, results);
      });
    };
    db.updateData = function(table_name, columns, data, con_col, con_val, mysqlSetting, cb){
      var colstring, i, i$, len$, col, sql;
      colstring = '';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ", ";
        }
        colstring += "`" + col.name.trim() + "`='" + data[i] + "'";
        i += 1;
      }
      sql = "UPDATE " + table_name + " SET " + colstring + " WHERE " + con_col + " = '" + con_val + "'";
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.updateWhereData = function(table_name, columns, data, wcon, mysqlSetting, cb){
      var colstring, i, i$, len$, col, sql;
      colstring = '';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ", ";
        }
        colstring += "`" + col.name.trim() + "`= " + data[i];
        i += 1;
      }
      sql = "UPDATE " + table_name + " SET " + colstring + " WHERE " + wcon;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.alterUnique = function(table_name, columns, mysqlSetting, cb){
      var colstring, i, i$, len$, col, sql;
      colstring = '';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (col.unique) {
          if (i > 0) {
            colstring += ", ";
          }
          colstring += "`" + col.name.trim() + "`";
          i += 1;
        }
      }
      if (colstring !== '') {
        sql = "ALTER TABLE `" + table_name + "` ADD UNIQUE INDEX `uidx` (" + colstring + ")";
        return db.executeSQL(sql, mysqlSetting, function(error, results){
          return cb(error, results);
        });
      } else {
        return cb("OK", "No unique column found");
      }
    };
    db.countColumns = function(table_name, columns, mysqlSetting, cb){
      var colstring, i, i$, len$, col, sql;
      colstring = '';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (!(col["Key"].toLowerCase() === "uni")) {
          if (i > 0) {
            colstring += ", ";
          }
          colstring += "COUNT(`" + col["Field"].trim() + "`) AS `" + col["Field"].trim() + "`";
          i += 1;
        }
      }
      sql = "SELECT " + colstring + " FROM " + table_name;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.getNullColumns = function(table_name, mysqlSetting, cb){
      return db.getColumns(table_name, mysqlSetting, function(err, colres){
        return db.countColumns(table_name, colres, mysqlSetting, function(err, res){
          var nullColumns, result, i$, ref$, len$, col;
          nullColumns = [];
          result = res[0];
          for (i$ = 0, len$ = (ref$ = colres).length; i$ < len$; ++i$) {
            col = ref$[i$];
            if (result[col["Field"].trim()] === 0) {
              nullColumns.push(col["Field"].trim());
            }
          }
          return cb("", nullColumns);
        });
      });
    };
    db.addColumns = function(table_name, columns, mysqlSetting, cb){
      var colstring, i, i$, len$, col, sql;
      colstring = '';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ", ";
        }
        colstring += " ADD COLUMN `" + col.name.trim() + "` ";
        colstring += col.type + '(160)';
        i += 1;
      }
      sql = "ALTER TABLE `" + table_name + "` " + colstring;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.dropColumns = function(table_name, columns, mysqlSetting, cb){
      var colstring, i, i$, len$, col, sql;
      colstring = '';
      i = 0;
      for (i$ = 0, len$ = columns.length; i$ < len$; ++i$) {
        col = columns[i$];
        if (i > 0) {
          colstring += ", ";
        }
        colstring += " DROP COLUMN `" + col.trim() + "`";
        i += 1;
      }
      sql = "ALTER TABLE `" + table_name + "` " + colstring;
      return db.executeSQL(sql, mysqlSetting, function(error, results){
        return cb(error, results);
      });
    };
    db.checkRelation = function(table_name, column, data, mysqlSetting, cb){
      var datastring, i, i$, len$, d, info, valid;
      datastring = '';
      i = 0;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        d = data[i$];
        if (i > 0) {
          datastring += " OR ";
        }
        datastring += "`" + column + "`='" + d + "'";
        i += 1;
      }
      info = "No info";
      valid = false;
      return db.getColumnsByName(table_name, column, mysqlSetting, function(err, res){
        var valid, sql, info;
        if (res.length !== 0) {
          if (res[0]["Key"].toLowerCase() === "uni" || res[0]["Key"].toLowerCase() === "pri") {
            valid = true;
            sql = "SELECT COUNT(`_id`) AS COUNT FROM `" + table_name + "` WHERE " + datastring;
            return db.executeSQL(sql, mysqlSetting, function(error, results){
              return cb(error, results, valid, "No info");
            });
          } else {
            info = "Column must pkey or unique";
            return cb(err, res, valid, info);
          }
        } else {
          info = "Column not found";
          return cb(err, res, valid, info);
        }
      });
    };
    db.cleanNullRow = function(table_name, with_delete, mysqlSetting, cb){
      return db.getColumns(table_name, mysqlSetting, function(err, res){
        var where_cond, i, i$, len$, r;
        where_cond = "";
        i = 0;
        for (i$ = 0, len$ = res.length; i$ < len$; ++i$) {
          r = res[i$];
          i += 1;
          if (r["Field"] !== "_id" && r["Key"].toLowerCase() !== "uni") {
            where_cond += "`" + r["Field"] + "` is NULL";
            if (i !== res.length) {
              where_cond += " AND ";
            }
          }
        }
        return db.deleteWhereData(table_name, where_cond, mysqlSetting, function(error, results){
          return db.getRowCount(table_name, mysqlSetting, function(error, results){
            if (with_delete) {
              if (results[0]['COUNT(*)'] === 0) {
                return db.dropTable(table_name, mysqlSetting, function(error, results){
                  return cb(error, results);
                });
              } else {
                return db.getNullColumns(table_name, mysqlSetting, function(error, results){
                  return db.dropColumns(table_name, results, mysqlSetting, function(error, results){
                    return cb(error, results);
                  });
                });
              }
            } else {
              return cb(error, results);
            }
          });
        });
      });
    };
    db.escapeString = function(str){
      return ("" + str).replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function(char){
        switch (char) {
        case "\0":
          return "\\0";
        case "\x08":
          return "\\b";
        case "\x09":
          return "\\t";
        case "\x1a":
          return "\\z";
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case "\"":
        case "'":
        case "\\":
        case "%":
          return "\\" + char;
        }
      });
    };
    db.log = function(){
      console.log("MySQL OK");
      return "Some shitty strings";
    };
    db.test = function(mysqlSetting){
      var sql;
      sql = "CREATE TABLE pet (name VARCHAR(20), sex CHAR(1), birth DATE, death DATE)";
      return db.executeSQL(sql, mysqlSetting);
    };
    return this.__MYSQL__ = db;
  };
}).call(this);
