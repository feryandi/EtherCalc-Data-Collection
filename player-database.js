// Generated by LiveScript 1.5.0
(function(){
  this.include = function(){
    return this.client({
      '/player/database.js': function(){
        var $, SocialCalc, nhr, header_div, error_div, sidebar_div, content_div_s, content_div_e, notcon_div, notest_div, plwait_div;
        $ = window.jQuery || window.$;
        if (!$) {
          return location.reload();
        }
        SocialCalc = window.SocialCalc || alert('Cannot find window.SocialCalc');
        nhr = "<hr style=\"display: block;height: 1px;border: 0;border-top: 1px solid rgb(204,204,204);margin: 1em 0;padding: 0;\">";
        header_div = "<span style=\"font-size: 14px;\"><br><br><b>Data Table</b></span><br/>You could add new table using two way;<br/>automatic detection and manually add table.<br/>" + nhr + "<b>Automatic Detection</b><br/>Using the automatic detection will reset all of the current table.<br/><input type=\"button\" value=\"Detect Spreadsheet Table\" onclick=\"window.Synchronize();\" style=\"font-size:x-small;\"><br/>" + nhr + "<b>Add Manually</b><br/>Insert a JSON Object consist of `header`, `data`, and `range` to add new table.<br/><div><textarea id=\"databaseManualInput\" name=\"databaseManualInput\" style=\"width: 95%;min-height: 130px;\"></textarea></div></td><td style=\"vertical-align:middle;text-align:right;\"><input type=\"button\" value=\"Add New Table\" onclick=\"window.AddManual();\" style=\"font-size:x-small;\"></td></tr></table>";
        error_div = "<div id=\"databaseErrorMessages\" style=\"width: 100%; min-height: 15px; background-color: rgb(242,152,137); padding: 15px; \">TEST</div>";
        sidebar_div = "<div style=\"position: relative; float: left; width: 250px; height: 100%; background: rgb(228,228,228); padding-left: 25px; padding-right: 25px;\">" + header_div + "</div>";
        content_div_s = "<div style=\"margin-left: 300px; width: auto; height: 100%; position: relative; overflow: auto; z-index: 1;\">";
        content_div_e = "</div>";
        notcon_div = "<div style=\"width: 100%; height: 100%; background-color: rgb(224,224,224); color: rgb(55,55,55);\"><div style=\"padding: 15px\"><span style=\"font-size: 18px;\"><b>Not Connected to Database</b></span><br/>Please input your database setting and<br/>click 'Connect' button.</div></div>";
        notest_div = "<div style=\"width: 100%; height: 100%; background-color: rgb(224,224,224); color: rgb(55,55,55);\"><div style=\"padding: 15px\"><span style=\"font-size: 18px;\"><b>Cannot Established Connection to Database</b></span><br/>Please check if your database is able to be connected by outside application.<br/><br/>Or, input other database setting and<br/>click 'Connect' button.</div></div>";
        plwait_div = "<div style=\"width: 100%; height: 100%; background-color: rgb(224,224,224); color: rgb(55,55,55);\"><div style=\"padding: 15px\"><span style=\"font-size: 18px;\"><b>Please Wait...</b></span><br/>Trying to establish connection with database.</div></div>";
        window.RefreshView = function(){
          var sheet, gview, content_div, savedData, sd, i, i$, len$, t, table;
          sheet = SocialCalc.GetSpreadsheetControlObject();
          gview = sheet.views.database.element;
          content_div = content_div_s;
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          if (savedData.value !== null && savedData.value !== "") {
            sd = JSON.parse(savedData.value);
            i = 1;
            for (i$ = 0, len$ = sd.length; i$ < len$; ++i$) {
              t = sd[i$];
              table = new Table(null, null);
              table.Deserialize(JSON.stringify(t));
              content_div += table.GetHTMLForm(i);
              i++;
            }
          }
          content_div += content_div_e;
          return gview.innerHTML = sidebar_div + content_div;
        };
        window.GetDBSetting = function(){
          var setting;
          setting = {
            host: document.getElementById(spreadsheet.idPrefix + "databaseHost").value,
            port: document.getElementById(spreadsheet.idPrefix + "databasePort").value,
            user: document.getElementById(spreadsheet.idPrefix + "databaseUsername").value,
            password: document.getElementById(spreadsheet.idPrefix + "databasePassword").value,
            database: document.getElementById(spreadsheet.idPrefix + "databaseDBName").value
          };
          return setting;
        };
        window.SaveState = function(){
          var savedData, payload, request;
          console.log("Save State");
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          payload = {
            id: SocialCalc._room,
            tables: savedData.value,
            setting: JSON.parse(document.getElementById(spreadsheet.idPrefix + "databaseLoginData").value)
          };
          request = {
            type: "POST",
            url: window.location.protocol + "//" + window.location.host + "/_database/state",
            contentType: "application/json",
            data: JSON.stringify(payload),
            success: function(response){
              return console.log("STATE SAVED");
            },
            error: function(response){
              console.log("Error saving state to database");
              return console.log(response);
            }
          };
          return $.ajax(request);
        };
        window.LoadState = function(){
          var savedData, payload, request;
          console.log("Load State");
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          payload = {
            setting: JSON.parse(document.getElementById(spreadsheet.idPrefix + "databaseLoginData").value)
          };
          request = {
            type: "POST",
            url: window.location.protocol + "//" + window.location.host + "/_database/state/" + SocialCalc._room,
            contentType: "application/json",
            data: JSON.stringify(payload),
            success: function(response){
              console.log(response);
              if (response.length === 1) {
                savedData.value = response[0]["table_json"];
              }
              return window.RefreshView();
            },
            error: function(response){
              console.log("Error loading state to database");
              return console.log(response);
            }
          };
          return $.ajax(request);
        };
        window.DatabaseOnClick = function(s, t){
          var sheet, gview, savedData, loginData;
          sheet = SocialCalc.GetSpreadsheetControlObject();
          gview = sheet.views.database.element;
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          loginData = document.getElementById(spreadsheet.idPrefix + "databaseLoginData");
          if (savedData.value === null || savedData.value === "") {
            gview.innerHTML = notcon_div;
            if (loginData.value !== null && loginData.value !== "") {
              window.LoadState();
            }
          } else {
            window.RefreshView();
          }
          return;
        };
        window.SaveConfiguration = function(n){
          var savedData, sd, table, rows, i, i$, len$, row, e;
          console.log("SAVE CONFIGURATION TABLE " + n);
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          sd = JSON.parse(savedData.value);
          table = new Table(null, null);
          table.Deserialize(JSON.stringify(sd[parseInt(n) - 1]));
          rows = table.rows;
          table.range = document.getElementById("t" + n + ".databaseRange").value;
          table.name = document.getElementById("t" + n + ".databaseName").value;
          i = 1;
          for (i$ = 0, len$ = rows.length; i$ < len$; ++i$) {
            row = rows[i$];
            row["data"] = document.getElementById("t" + n + ".databaseData." + i).value;
            row["header"] = document.getElementById("t" + n + ".databaseLabel." + i).value;
            e = document.getElementById("t" + n + ".databaseType." + i);
            row["vtype"] = e.options[e.selectedIndex].value;
            e = document.getElementById("t" + n + ".databasePermitted." + i);
            row["vrange"] = encodeURIComponent(e.value);
            e = document.getElementById("t" + n + ".databaseRelation." + i);
            row["vrel"] = e.value;
            i = i + 1;
          }
          table.rows = rows;
          console.log(sd);
          sd[parseInt(n) - 1] = JSON.parse(table.Serialize());
          console.log(sd);
          savedData.value = JSON.stringify(sd);
          return window.SaveState();
        };
        window.DeleteTable = function(n){
          var savedData, sd;
          console.log("DELETE TABLE " + n);
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          sd = JSON.parse(savedData.value);
          sd.splice(n - 1, 1);
          savedData.value = JSON.stringify(sd);
          window.DatabaseOnClick();
          window.SaveState();
        };
        window.Connect = function(){
          var sheet, gview, loginData, setting, request;
          console.log("CONNECTING/DISCONNECTING TO DATABASE");
          sheet = SocialCalc.GetSpreadsheetControlObject();
          gview = sheet.views.database.element;
          gview.innerHTML = plwait_div;
          loginData = document.getElementById(spreadsheet.idPrefix + "databaseLoginData");
          setting = window.GetDBSetting();
          request = {
            type: "POST",
            url: window.location.protocol + "//" + window.location.host + "/_database/connect",
            contentType: "application/json",
            data: JSON.stringify(setting),
            success: function(response){
              console.log(response);
              if (response["status"] === "success") {
                console.log("Connection could be established");
                loginData.value = JSON.stringify(setting);
                return window.LoadState();
              } else {
                console.log("Connection could NOT be established");
                return gview.innerHTML = notest_div;
              }
            },
            error: function(response){
              console.log("Error connecting to API");
              return console.log(response);
            }
          };
          $.ajax(request);
        };
        window.Save = function(){
          var savedData, errorMsg, errCount, sheet, loadsheet, sheetdict, tables, i, i$, len$, t, table, spreadsheet_id, payload, error, ref$, request, val_type, error_box, e;
          console.log("SAVING TO DATABASE");
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          errorMsg = document.getElementById(spreadsheet.idPrefix + "databaseErrorMsg");
          errorMsg.innerHTML = "Saving...";
          errCount = 0;
          sheet = SocialCalc.GetSpreadsheetControlObject();
          loadsheet = new LoadSheet(sheet);
          sheetdict = loadsheet.LoadSheetDict();
          console.log(savedData.value);
          try {
            tables = JSON.parse(savedData.value);
            i = 0;
            for (i$ = 0, len$ = tables.length; i$ < len$; ++i$) {
              t = tables[i$];
              i += 1;
              console.log("SAVING TABLE " + i);
              table = new Table(sheetdict, null);
              table.Deserialize(JSON.stringify(t));
              spreadsheet_id = SocialCalc._room;
              payload = {
                name: SocialCalc._room,
                table: table.TupleSerializeWithChecker(spreadsheet_id),
                setting: JSON.parse(document.getElementById(spreadsheet.idPrefix + "databaseLoginData").value)
              };
              error = true;
              error = (ref$ = payload.table.error) != null ? ref$ : false;
              request = {
                type: "POST",
                url: window.location.protocol + "//" + window.location.host + "/_database/create",
                contentType: "application/json",
                data: JSON.stringify(payload),
                success: fn$,
                error: fn1$
              };
              if (!error) {
                $.ajax(request);
              } else {
                errCount += 1;
                console.log("ERROR VALIDATIONS");
                console.log(payload.table);
                val_type = payload.table.error.charAt(0).toUpperCase() + payload.table.error.slice(1);
                error_box = "<div style=\"background: rgb(255, 210, 202); padding: 5px; border-radius: 3px;\">" + val_type + " validation error on cell " + payload.table.coordinate + "</div>";
                errorMsg.innerHTML = error_box;
              }
            }
            if (errCount === 0) {
              errorMsg.innerHTML = "Successfully saved all tables!";
            }
            window.SaveState();
          } catch (e$) {
            e = e$;
            errorMsg.innerHTML = "Failed saving to database";
          }
          function fn$(response){
            console.log("OK OK OK MYSQL OK OK OK");
            return console.log(response);
          }
          function fn1$(response){
            console.log("Error saving data to database");
            return console.log(response);
          }
        };
        window.Synchronize = function(){
          var savedData, sheet, loadsheet, sheetdict, getLink, request;
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          sheet = SocialCalc.GetSpreadsheetControlObject();
          loadsheet = new LoadSheet(sheet);
          sheetdict = loadsheet.LoadSheetDict();
          getLink = function(sc, ec, sr, er){
            return "" + window.location.protocol + "//" + window.location.host + "/_framefinder/" + SocialCalc._room + "/" + sc + "/" + ec + "/" + sr + "/" + er;
          };
          request = {
            type: "GET",
            url: window.location.protocol + "//" + window.location.host + "/_hierachical/" + SocialCalc._room + "/20",
            contentType: "application/json",
            success: function(response){
              var links, clusters, raw, data, i$, len$, cluster, gview, content_div, total, sd;
              links = [];
              clusters = [];
              raw = [];
              data = JSON.parse(response);
              for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
                cluster = data[i$];
                raw.push(getLink(cluster.sc, cluster.ec, cluster.sr, cluster.er));
                links.push($.get(getLink(cluster.sc, cluster.ec, cluster.sr, cluster.er)));
                clusters.push([cluster.sc, cluster.ec, cluster.sr, cluster.er]);
              }
              console.log(raw);
              gview = sheet.views.database.element;
              content_div = content_div_s;
              total = 0;
              sd = [];
              return $.when.apply($, links).done(function(){
                $.each(arguments, function(i, d){
                  var data, table;
                  data = d[0];
                  if (data.length > 0) {
                    table = new Table(sheetdict, data);
                    table.SetColumnRange(parseInt(clusters[i][0]), parseInt(clusters[i][1]));
                    table.name = "" + SocialCalc._room + "_t" + (i - 1) + "";
                    if (table.IsHasData()) {
                      total += 1;
                      sd.push(JSON.parse(table.Serialize()));
                      return content_div += table.GetHTMLForm(total);
                    }
                  }
                });
                savedData.value = JSON.stringify(sd);
                content_div += content_div_e;
                gview.innerHTML = sidebar_div + content_div;
                return window.SaveState();
              });
            },
            error: function(response){
              return console.log("Error getting predicted data");
            }
          };
          $.ajax(request);
        };
        window.AddManual = function(){
          var sheet, loadsheet, sheetdict, savedData, manualData, sd, md, table;
          sheet = SocialCalc.GetSpreadsheetControlObject();
          loadsheet = new LoadSheet(sheet);
          sheetdict = loadsheet.LoadSheetDict();
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          manualData = document.getElementById("databaseManualInput");
          if (savedData.value === null || savedData.value === "") {
            savedData.value = "[]";
          }
          sd = JSON.parse(savedData.value);
          md = JSON.parse(manualData.value);
          if (!md.hasOwnProperty('header')) {
            console.log("Error - header not found");
            return;
          }
          if (!md.hasOwnProperty('data')) {
            console.log("Error - data not found");
            return;
          }
          if (!md.hasOwnProperty('range')) {
            console.log("Error - range not found");
            return;
          }
          table = new Table(sheetdict, null);
          table.Deserialize(JSON.stringify(md));
          table.MapHeaderData();
          table.name = "" + SocialCalc._room + "_t" + (sd.length + 1) + "";
          sd.push(JSON.parse(table.Serialize()));
          savedData.value = JSON.stringify(sd);
          window.DatabaseOnClick();
          window.SaveState();
        };
      }
    });
  };
}).call(this);
