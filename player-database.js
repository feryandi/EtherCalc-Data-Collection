// Generated by LiveScript 1.5.0
(function(){
  this.include = function(){
    return this.client({
      '/player/database.js': function(){
        var $, SocialCalc, header_div, table_template, Feature_SheetRow, FeatureFormat, MySheet, MyCell, LoadSheet;
        $ = window.jQuery || window.$;
        if (!$) {
          return location.reload();
        }
        SocialCalc = window.SocialCalc || alert('Cannot find window.SocialCalc');
        header_div = "<table cellspacing=\"0\" cellpadding=\"0\" style=\"font-weight:bold;margin:8px;\"><tr><td style=\"vertical-align:middle;padding-right:16px;\"><div>Current Label and Data</div></td><td style=\"vertical-align:middle;text-align:right;\"><input type=\"button\" value=\"Scan Spreadsheet\" onclick=\"\" style=\"font-size:x-small;\"></td></tr></table>";
        table_template = "<div style=\"margin-left:8px;border:1px solid rgb(192,192,192);display:inline-block;\"><div><center><h4>Table 1</h4></center></div><div><table style=\"border-top:1px solid rgb(192,192,192);padding-top:16px;\"><thead><tr><th>Label Name</th><th>Data Range</th><th>Type Validation</th><th>Range Validation</th><th>Relation Validation</th></tr></thead><tr><td><input id=\"%id.t1.databaseLabel1\" onchange=\"\" onfocus=\"%s.CmdGotFocus(this);\" class=\"btn btn-default btn-xs\"/></td><td><input id=\"%id.t1.databaseData1\" onchange=\"\" onfocus=\"%s.CmdGotFocus(this);\" class=\"btn btn-default btn-xs\"/></td><td><select id=\"%id.t1.databaseTypeV1\" size=\"1\" onfocus=\"%s.CmdGotFocus(this);\" class=\"btn btn-default btn-xs\"><option selected>None</option><option>String</option><option>Integer</option></select></td><td><input id=\"%id.t1.databaseRangeV1\" onchange=\"\" onfocus=\"%s.CmdGotFocus(this);\" class=\"btn btn-default btn-xs\"/></td><td><input id=\"%id.t1.databaseRelationV1\" onchange=\"\" onfocus=\"%s.CmdGotFocus(this);\" class=\"btn btn-default btn-xs\"/></td></tr></table></div></div>";
        Feature_SheetRow = (function(){
          Feature_SheetRow.displayName = 'Feature_SheetRow';
          var prototype = Feature_SheetRow.prototype, constructor = Feature_SheetRow;
          function Feature_SheetRow(){
            this.naset = ['(na)', 'n/a', '(n/a)', '(x)', '-', '--', 'z', '...'];
            this.spcharset = ['<', '#', '>', ';', '$'];
            this.myformat = new FeatureFormat;
            this.goodrowset = [];
          }
          Feature_SheetRow.prototype.GenerateSingularFeatureCrf = function(mysheet, filename, sheetname){
            var feadict, i$, to$, crow, rowcelldict, j$, to1$, ccol, mycell, blankflag;
            feadict = {};
            for (i$ = 0, to$ = mysheet.nrownum - 1; i$ <= to$; ++i$) {
              crow = i$;
              rowcelldict = {};
              for (j$ = 0, to1$ = mysheet.ncolnum - 1; j$ <= to1$; ++j$) {
                ccol = j$;
                if (mysheet.sheetdict[SocialCalc.rcColname(colnum) + rownum] !== null) {
                  mycell = mysheet.sheetdict[SocialCalc.rcColname(colnum) + rownum];
                  rowcelldict[ccol] = mycell;
                }
              }
              if (rowcelldict.length === 0) {
                continue;
              }
              if (feadict[crow - 1] !== null) {
                blankflag = false;
              } else {
                blankflag = true;
              }
              feadict[crow] = this.GenerateFeatureByRowCrf(crow, rowcelldict, mysheet, blankflag);
            }
            return feadict;
          };
          Feature_SheetRow.prototype.GenerateFeatureByRowCrf = function(crow, rowcelldict, mysheet, blankflag){
            var feavec, clinetxt;
            feavec = [];
            clinetxt = '';
            rowcelldict.forEach(function(value, i){
              return clinetxt += value.cstr + ' ';
            });
            feavec.push(blankflag);
            feavec.push(this.FeatureHasMergeCell(crow, mysheet));
            feavec.push(this.FeatureReachRightBound(crow, rowcelldict, mysheet.maxcolnum));
            feavec.push(this.FeatureReachLeftBound(rowcelldict));
            feavec.push(this.FeatureIsOneColumn(rowcelldict));
            feavec.push(this.FeatureHasCenterAlignCell(crow, rowcelldict));
            feavec.push(this.FeatureHasLeftAlignCell(crow, rowcelldict));
            feavec.push(this.FeatureHasBoldFontCell(crow, rowcelldict));
            feavec.push(this.FeatureIndentation(clinetxt));
            feavec.push(this.FeatureStartWithTable(clinetxt));
            feavec.push(this.FeatureStartWithPunctation(clinetxt));
            feavec.push(this.FeatureNumberPercentHigh(rowcelldict));
            feavec.push(this.FeatureDigitalPercentHigh(rowcelldict));
            feavec.push(this.FeatureAlphabetaAllCapital(clinetxt));
            feavec.push(this.FeatureAlphabetaStartWithCapital(rowcelldict));
            feavec.push(this.FeatureAlphabetaStartWithLowercase(rowcelldict));
            feavec.push(this.FeatureAlphabetaCellnumPercentHigh(rowcelldict));
            feavec.push(this.FeatureAlphabetaPercentHigh(clinetxt));
            feavec.push(this.FeatureContainSpecialChar(clinetxt));
            feavec.push(this.FeatureContainColon(clinetxt));
            feavec.push(this.FeatureYearRangeCellnumHigh(rowcelldict));
            feavec.push(this.FeatureYearRangePercentHigh(rowcelldict));
            feavec.push(this.FeatureWordLengthHigh(rowcelldict));
            return feavec;
          };
          Feature_SheetRow.prototype.FeatureOneVariableTxt = function(predicate, rowname, flag){
            if (flag === true) {
              return this.myformat.OneVariable(predicate, rowname);
            }
            return null;
          };
          Feature_SheetRow.prototype.FeatureIsRow = function(rowname){
            return this.myformat.OneVariable('IsRow', rowname);
          };
          Feature_SheetRow.prototype.FeatureWordRepeatHigh = function(clinetxt, csheettxt){
            var wordarr, reptcount, wordcount, csheetcount, i$, to$, i;
            wordarr = clinetxt.split(/[^A-Za-z]/);
            reptcount = 0;
            wordcount = 0;
            csheetcount = [];
            csheettxt.forEach(function(x){
              csheetcount[x] = (csheetcount[x] || 0) + 1;
            });
            for (i$ = 0, to$ = wordarr.length - 1; i$ <= to$; ++i$) {
              i = i$;
              if (wordarr[i].length !== 0) {
                wordcount += 1;
                reptcount += csheetcount[cword];
              }
            }
            if (wordcount === 0) {
              return false;
            }
            if (float(reptcount) / wordcount >= 2) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureWordLengthHigh = function(rowcelldict){
            var retVal;
            if (rowcelldict.length !== 1) {
              return false;
            }
            retVal = false;
            rowcelldict.forEach(function(value, i){
              var cval, retVal;
              cval = value.cstr;
              if (cval.length > 40) {
                retVal = true;
              }
            });
            return retVal;
          };
          Feature_SheetRow.prototype.FeatureIndentation = function(clinetxt){
            var i$, to$, i;
            for (i$ = 0, to$ = clinetxt.length - 1; i$ <= to$; ++i$) {
              i = i$;
              if (clinetxt[i] >= 'A' && clinetxt[i] <= 'Z') {
                break;
              }
              if (clinetxt[i] >= 'a' && clinetxt[i] <= 'z') {
                break;
              }
              if (clinetxt[i] >= '0' && clinetxt[i] <= '9') {
                break;
              }
            }
            if (i > 0) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureHasMergeCell = function(crow, mysheet){
            if (mysheet.mergerowdict.hasOwnProperty(crow)) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureReachRightBound = function(crow, rowcelldict, ncolnum){
            if (rowcelldict.hasOwnProperty(ncolnum)) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureReachLeftBound = function(rowcelldict){
            if (rowcelldict.hasOwnProperty(0)) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureNumberPercentHigh = function(rowcelldict){
            var digitalcount;
            if (rowcelldict.length === 0) {
              return false;
            }
            digitalcount = 0;
            rowcelldict.forEach(function(value, i){
              var cstr;
              cstr = value.cstr;
              if (this.hasDigits(cstr)) {
                return digitalcount += 1;
              } else if (this.isNa(cstr)) {
                return digitalcount += 1;
              }
            });
            if (float(digitalcount) / rowcelldict.length >= 0.6) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureDigitalPercentHigh = function(rowcelldict){
            var digitalcount;
            if (rowcelldict.length === 0) {
              return false;
            }
            digitalcount = 0;
            rowcelldict.forEach(function(value, i){
              var cstr;
              cstr = value.cstr;
              if (this.isNumber(cstr)) {
                return digitalcount += 1;
              } else if (this.isNa(cstr)) {
                return digitalcount += 1;
              }
            });
            if (float(digitalcount) / rowcelldict.length >= 0.6) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureYearRangeCellnumHigh = function(rowcelldict){
            var yearcount;
            if (rowcelldict.length === 0) {
              return false;
            }
            yearcount = 0;
            rowcelldict.forEach(function(value, i){
              var cstr, digitarr;
              cstr = value.cstr;
              digitarr = this.getNumset(cstr);
              return digitarr.forEach(function(item){
                if (item >= 1800 && item <= 2300) {
                  return yearcount += 1;
                }
              });
            });
            if (yearcount >= 3) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureYearRangePercentHigh = function(rowcelldict){
            var yearcount, totalcount;
            if (rowcelldict.length === 0) {
              return false;
            }
            yearcount = 0;
            totalcount = 1;
            rowcelldict.forEach(function(value, i){
              var cstr, digitarr;
              cstr = value.cstr;
              digitarr = this.getNumset(cstr);
              totalcount += digitarr.length;
              return digitarr.forEach(function(item){
                if (item >= 1800 && item <= 2300) {
                  return yearcount += 1;
                }
              });
            });
            if (float(yearcount) / totalcount >= 0.7) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureAlphabetaStartWithCapital = function(rowcelldict){
            rowcelldict.forEach(function(value, i){
              var cstr, mtype;
              cstr = value.cstr;
              mtype = value.mtype;
              if (mtype === 'str' && cstr.length !== 0) {
                if (this.hasLetter(cstr) && !(cstr.charAt(0) >= 'A' && cstr.charAt(0) <= 'Z')) {
                  return false;
                }
              }
            });
            return true;
          };
          Feature_SheetRow.prototype.FeatureAlphabetaStartWithLowercase = function(rowcelldict){
            var ccol, cstr;
            ccol = -1;
            rowcelldict.forEach(function(value, i){
              var ccol;
              if (ccol === -1 || ccol >= i) {
                return ccol = i;
              }
            });
            cstr = rowcelldict[ccol].cstr;
            if (cstr.length === 0) {
              return false;
            }
            if (this.hasLetter(cstr) && (cstr.charAt(0) >= 'a' && cstr.charAt(0) <= 'z')) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureAlphabetaAllCapital = function(clinetxt){
            var capitalcount, i$, to$, i;
            capitalcount = 0;
            for (i$ = 0, to$ = clinetxt.length - 1; i$ <= to$; ++i$) {
              i = i$;
              if (clinetxt.charAt(i) >= 'A' && clinetxt.charAt(i) >= 'Z') {
                capitalcount += 1;
              } else if (clinetxt.charAt(i) >= 'a' && clinetxt.charAt(i) >= 'z') {
                return false;
              }
            }
            if (capitalcount > 0) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureAlphabetaCellnumPercentHigh = function(rowcelldict){
            var count;
            count = 0;
            rowcelldict.forEach(function(value, i){
              var cstr, mtype;
              cstr = value.cstr;
              mtype = value.mtype;
              if (mtype === 'str' && cstr.search(/[A-Za-z]/)) {
                return count += 1;
              }
            });
            if (float(count) / rowcelldict.length >= 0.6) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureAlphabetaPercentHigh = function(clinetxt){
            var count, i$, to$, i;
            count = 0;
            for (i$ = 0, to$ = clinetxt.length - 1; i$ <= to$; ++i$) {
              i = i$;
              if (clinetxt.charAt(i) >= 'A' && clinetxt.charAt(i) <= 'Z') {
                count += 1;
              } else if (clinetxt.charAt(i) >= 'a' && clinetxt.charAt(i) <= 'z') {
                count += 1;
              }
            }
            if (float(count) / clinetxt.length >= 0.6) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureContainColon = function(clinetxt){
            if (clinetxt.search(':' >= -1)) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureContainSpecialChar = function(clinetxt){
            var i$, to$, i;
            for (i$ = 0, to$ = clinetxt.length - 1; i$ <= to$; ++i$) {
              i = i$;
              if (clinetxt.charAt(i).search(/[\<#>;$]/ > -1)) {
                return true;
              }
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureIsOneColumn = function(rowcelldict){
            if (rowcelldict.length === 1) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureHasCenterAlignCell = function(crow, rowcelldict){
            rowcelldict.forEach(function(value, i){
              if (value.centeralign_flag) {
                return true;
              }
            });
            return false;
          };
          Feature_SheetRow.prototype.FeatureHasLeftAlignCell = function(rownum, rowcelldict){
            rowcelldict.forEach(function(value, i){
              if (value.leftalign_flag) {
                return true;
              }
            });
            return false;
          };
          Feature_SheetRow.prototype.FeatureHasBoldFontCell = function(rownum, rowcelldict){
            rowcelldict.forEach(function(value, i){
              if (value.boldflag) {
                return true;
              }
            });
            return false;
          };
          Feature_SheetRow.prototype.FeatureStartWithTable = function(clinetxt){
            if (clinetxt.length === 0) {
              return false;
            }
            if (this.startsWith(clinetxt.trim(), "Table")) {
              return true;
            }
            if (this.startsWith(clinetxt.trim(), "Tabel")) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureStartWithPunctation = function(clinetxt){
            var cchar;
            if (clinetxt.length === 0) {
              return false;
            }
            cchar = clinetxt.charAt(0);
            if (this.hasDigits(cchar)) {
              return false;
            }
            if (this.hasLetter(cchar)) {
              return false;
            }
            return true;
          };
          Feature_SheetRow.prototype.FeatureEndWithAnd = function(clinetxt){
            if (clinetxt.length === 0) {
              return false;
            }
            if (this.endsWith(clinetxt.trim().toLowerCase(), "and")) {
              return true;
            }
            if (this.endsWith(clinetxt.trim(), ",")) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureIsFirstRow = function(rownum){
            if (rownum === 0) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.FeatureIsLastRow = function(rownum, maxrownum){
            if (rownum === maxrownum) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.isNumber = function(cstr){
            return !isNaN(cstr);
          };
          Feature_SheetRow.prototype.hasLetter = function(cstr){
            if (cstr.match(/[A-Za-z]/)) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.hasDigits = function(cstr){
            if (cstr.match(/[0-9]/)) {
              return true;
            }
            return false;
          };
          Feature_SheetRow.prototype.isNa = function(cstr){
            this.naset.forEach(function(value){
              if (cstr === value) {
                return true;
              }
            });
            return false;
          };
          Feature_SheetRow.prototype.getNumset = function(cstr){
            var carr, numset;
            carr = cstr.split(' ');
            numset = [];
            carr.forEach(function(value){
              if (this.isNumber(value)) {
                return numset.push(item);
              }
            });
            return numset;
          };
          Feature_SheetRow.prototype.getRowname = function(filename, csheetname, rownum){
            var pfilename, psheetname;
            pfilename = filename.replace('.', '_');
            psheetname = csheetname.replace(' ', '_');
            return 'S' + pfilename + '____' + psheetname + '____' + rownum;
          };
          Feature_SheetRow.prototype.parseFilename = function(filepath){
            var iarr;
            iarr = filepath.split('/');
            return iarr[iarr.length - 1];
          };
          Feature_SheetRow.prototype.startsWith = function(str, prefix){
            return str.indexOf(prefix) === 0;
          };
          Feature_SheetRow.prototype.endsWith = function(str, suffix){
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
          };
          return Feature_SheetRow;
        }());
        FeatureFormat = (function(){
          FeatureFormat.displayName = 'FeatureFormat';
          var prototype = FeatureFormat.prototype, constructor = FeatureFormat;
          FeatureFormat.prototype.OneVariable = function(name, var1){
            return name + '(' + vari1 + ')\n';
          };
          FeatureFormat.prototype.TwoVariable = function(name, vari1, vari2){
            return name + '(' + vari1 + ',' + vari2 + ')\n';
          };
          function FeatureFormat(){}
          return FeatureFormat;
        }());
        MySheet = (function(){
          MySheet.displayName = 'MySheet';
          var prototype = MySheet.prototype, constructor = MySheet;
          function MySheet(){
            this.sheetdict = {};
            this.mergerowdict = [];
            this.maxcolnum = 0;
            this.maxrownum = 0;
            this.nrownum = 0;
            this.ncolnum = 0;
            this.txt = '';
            this.mergestrarr = [];
            this.mergecellset = [];
          }
          MySheet.prototype.AddMergeCell = function(row1, row2, col1, col2){
            var i$, rownum, j$, colnum, obj;
            for (i$ = row1; i$ <= row2; ++i$) {
              rownum = i$;
              this.mergerowdict[rownum] = true;
              for (j$ = col1; j$ <= col2; ++j$) {
                colnum = j$;
                obj = SocialCalc.rcColname(colnum) + rownum;
                this.mergecellset.push(obj);
              }
            }
          };
          MySheet.prototype.InsertCell = function(rownum, colnum, nrownum, ncolnum, mtype, indents, alignstyle, borderstyle, bgcolor, boldflag, height, italicflag, underlineflag, value){
            var mycell;
            this.nrownum = nrownum;
            this.ncolnum = ncolnum;
            if (rownum > this.maxrownum) {
              this.maxrownum = rownum;
            }
            if (colnum > this.maxcolnum) {
              this.maxcolnum = colnum;
            }
            mycell = new MyCell(value, mtype, indents, alignstyle, boldflag, borderstyle, bgcolor, height, italicflag, underlineflag);
            this.sheetdict[SocialCalc.rcColname(colnum) + rownum] = mycell;
            if (mtype === 'str') {
              return this.txt += value + ' ';
            }
          };
          return MySheet;
        }());
        MyCell = (function(){
          MyCell.displayName = 'MyCell';
          var prototype = MyCell.prototype, constructor = MyCell;
          function MyCell(value, mtype, indents, alignstyle, boldflag, borderstyle, bgcolor, height, italicflag, underlineflag){
            this.cstr = value;
            this.mtype = mtype;
            this.indents = this.GetIndents(indents);
            this.centeralign_flag = false;
            this.leftalign_flag = false;
            this.rightalign_flag = false;
            if (alignstyle === 1) {
              this.leftalign_flag = true;
            } else if (alignstyle === 2) {
              this.centeralign_flag = true;
            } else if (alignstyle === 3) {
              this.rightalign_flag = true;
            }
            this.boldflag = false;
            if (boldflag === 1) {
              this.boldflag = true;
            }
            this.bottomborder = false;
            this.upperborder = false;
            this.leftborder = false;
            this.rightborder = false;
            if (borderstyle[0] === '1') {
              this.bottomborder = true;
            }
            if (borderstyle[1] === '1') {
              this.upperborder = true;
            }
            if (borderstyle[2] === '1') {
              this.leftborder = true;
            }
            if (borderstyle[3] === '1') {
              this.rightborder = true;
            }
            this.bgcolor = bgcolor;
            this.height = height;
            this.italic = italicflag;
            this.underline = underlineflag;
            this.mergecellcount = 1;
            this.startcol = 0;
          }
          MyCell.prototype.WritestrAlignstyle = function(){
            if (this.leftalign_flag) {
              return '1';
            } else if (this.centeralign_flag) {
              return '2';
            } else if (this.rightalign_flag) {
              return '3';
            }
            return '0';
          };
          MyCell.prototype.WritestrBordstyle = function(){
            var cstr;
            cstr = '';
            if (this.bottomborder) {
              cstr += '1';
            } else {
              cstr += '0';
            }
            if (this.upperborder) {
              cstr += '1';
            } else {
              cstr += '0';
            }
            if (this.leftborder) {
              cstr += '1';
            } else {
              cstr += '0';
            }
            if (this.rightborder) {
              cstr += '1';
            } else {
              cstr += '0';
            }
            return cstr;
          };
          MyCell.prototype.GetIndents = function(indents){
            var i$, to$, i;
            if (this.cstr.length === 0) {
              return 0;
            }
            for (i$ = 0, to$ = this.cstr.length - 1; i$ <= to$; ++i$) {
              i = i$;
              if (this.cstr.charAt(i === ' ') || !!this.cstr.charAt(i).match(/^[.,:!?]/)) {
                continue;
              } else {
                break;
              }
            }
            return i + indents * 2;
          };
          return MyCell;
        }());
        LoadSheet = (function(){
          LoadSheet.displayName = 'LoadSheet';
          var prototype = LoadSheet.prototype, constructor = LoadSheet;
          function LoadSheet(spreadsheet){
            this.wb = spreadsheet;
          }
          LoadSheet.prototype.LoadSheetDict = function(){
            var sheetdict, cmysheet, str, i$, to$, rownum, j$, to1$, colnum, cellName, cell, cellType, cStr, cellDType, cellAttr, row1, row2, col1, col2, indents, alignstyle, borderstyle, bgcolor, boldflag, height, italicflag, underlineflag;
            sheetdict = {};
            cmysheet = new MySheet;
            str = '';
            for (i$ = 1, to$ = this.wb.sheet.LastRow(); i$ <= to$; ++i$) {
              rownum = i$;
              for (j$ = 1, to1$ = this.wb.sheet.LastCol(); j$ <= to1$; ++j$) {
                colnum = j$;
                cellName = SocialCalc.rcColname(colnum) + rownum;
                cell = this.wb.sheet.GetAssuredCell(cellName);
                cellType = this.GetValueType(cell.valuetype);
                if (cellType > 0 || cellType < 5) {
                  cStr = cell.datavalue;
                  cellDType = this.GetDataType(cell.datatype, cStr);
                  cellAttr = this.wb.sheet.EncodeCellAttributes(cellName);
                  if (cellAttr.rowspan.val > 1 || cellAttr.colspan.val > 1) {
                    row1 = rownum;
                    row2 = rownum + cellAttr.rowspan.val - 1;
                    col1 = colnum;
                    col2 = colnum + cellAttr.colspan.val - 1;
                    cmysheet.AddMergeCell(row1, row2, col1, col2);
                  }
                  indents = parseInt(this.FeatureIndentation(cellAttr));
                  alignstyle = parseInt(this.FeatureAlignStyle(cellAttr));
                  borderstyle = this.FeatureBorderStyle(cellAttr);
                  bgcolor = this.FeatureFontBgcolor(cellAttr);
                  boldflag = parseInt(this.FeatureFontBold(cellAttr));
                  height = parseInt(this.FeatureFontHeight(cellAttr));
                  italicflag = parseInt(this.FeatureFontItalic(cellAttr));
                  underlineflag = parseInt(this.FeatureFontUnderline(cellAttr));
                  cmysheet.InsertCell(rownum, colnum, this.wb.sheet.LastRow(), this.wb.sheet.LastCol(), cellType, indents, alignstyle, borderstyle, bgcolor, boldflag, height, italicflag, underlineflag, cStr);
                }
                str += '([' + cellName + '] ' + indents + ', ' + alignstyle + ', ' + borderstyle + ', ' + bgcolor + ', ' + boldflag + ', ' + height + ', ' + italicflag + ', ' + underlineflag + ')';
              }
              str += '<br/>';
            }
            sheetdict['Sheet1'] = cmysheet;
            return sheetdict;
          };
          LoadSheet.prototype.GetValueType = function(type){
            var ct;
            switch (type) {
            case 't':
              ct = 1;
              break;
            case 'n':
              ct = 2;
              break;
            case 'nd':
              ct = 3;
              break;
            case 'nl':
              ct = 4;
              break;
            case 'e':
              ct = 5;
              break;
            case 'b':
              ct = 6;
              break;
            default:
              ct = 0;
            }
            return ct;
          };
          LoadSheet.prototype.GetDataType = function(type, value){
            switch (type) {
            case 't':
              type = 'str';
              break;
            case 'v':
              if (value % 1 === 0) {
                type = 'int';
              } else {
                type = 'float';
              }
              break;
            case 'c':
              type = 'str';
            }
            return type;
          };
          LoadSheet.prototype.FeatureIndentation = function(cellAttr){
            var val, unit;
            if (cellAttr.padleft.def) {
              return 0;
            } else {
              val = cellAttr.padleft.val;
              unit = val.substring(val.length - 2);
              if (unit === 'pt') {
                return val.substring(0, val.length - 2);
              } else if (unit === 'px') {
                return val.substring(0, val.length - 2) * 1.3333;
              }
            }
          };
          LoadSheet.prototype.FeatureAlignStyle = function(cellAttr){
            if (cellAttr.alignhoriz.def) {
              return '1';
            } else {
              switch (cellAttr.alignhoriz.val) {
              case 'left':
                return '1';
              case 'center':
                return '2';
              case 'right':
                return '3';
              }
            }
          };
          LoadSheet.prototype.FeatureFontBold = function(cellAttr){
            if (cellAttr.fontlook.def) {
              return '0';
            } else {
              switch (cellAttr.fontlook.val) {
              case 'normal bold':
                return '1';
              case 'italic bold':
                return '1';
              default:
                return '0';
              }
            }
          };
          LoadSheet.prototype.FeatureFontHeight = function(cellAttr){
            var val, unit;
            if (cellAttr.fontsize.def) {
              return 10;
            } else {
              val = cellAttr.fontsize.val;
              unit = val.substring(val.length - 2);
              if (unit === 'pt') {
                return val.substring(0, val.length - 2);
              } else if (unit === 'px') {
                return val.substring(0, val.length - 2) * 0.75;
              } else {
                switch (cellAttr.fontsize.val) {
                case 'x-small':
                  return 8;
                case 'small':
                  return 10;
                case 'medium':
                  return 12;
                case 'large':
                  return 14;
                case 'x-large':
                  return 18;
                }
              }
            }
          };
          LoadSheet.prototype.FeatureFontUnderline = function(cellAttr){
            return '0';
          };
          LoadSheet.prototype.FeatureFontItalic = function(cellAttr){
            if (cellAttr.fontlook.def) {
              return '0';
            } else {
              switch (cellAttr.fontlook.val) {
              case 'italic normal':
                return '1';
              case 'italic bold':
                return '1';
              default:
                return '0';
              }
            }
          };
          LoadSheet.prototype.FeatureFontBgcolor = function(cellAttr){
            return cellAttr.bgcolor.val;
          };
          LoadSheet.prototype.FeatureBorderStyle = function(cellAttr){
            var str;
            str = '';
            if (cellAttr.bt.val === '') {
              str += '0';
            } else {
              str += '1';
            }
            if (cellAttr.bb.val === '') {
              str += '0';
            } else {
              str += '1';
            }
            if (cellAttr.bl.val === '') {
              str += '0';
            } else {
              str += '1';
            }
            if (cellAttr.br.val === '') {
              str += '0';
            } else {
              str += '1';
            }
            return str;
          };
          return LoadSheet;
        }());
        window.DatabaseOnClick = function(s, t){
          var ls, dictTxt, gview;
          ls = new LoadSheet(SocialCalc.GetSpreadsheetControlObject());
          dictTxt = JSON.stringify(ls.LoadSheetDict());
          gview = spreadsheet.views.database.element;
          gview.innerHTML = dictTxt;
          return;
        };
      }
    });
  };
}).call(this);
