// Generated by LiveScript 1.5.0
(function(){
  this.include = function(){
    return this.client({
      '/player/database.js': function(){
        var $, SocialCalc, header_div;
        $ = window.jQuery || window.$;
        if (!$) {
          return location.reload();
        }
        SocialCalc = window.SocialCalc || alert('Cannot find window.SocialCalc');
        header_div = "<table cellspacing=\"0\" cellpadding=\"0\" style=\"font-weight:bold;margin:8px;\"><tr><td style=\"vertical-align:middle;padding-right:16px;\"><div>Current Label and Data</div></td><td style=\"vertical-align:middle;text-align:right;\"><input type=\"button\" value=\"Scan Spreadsheet\" onclick=\"window.Synchronize();\" style=\"font-size:x-small;\"></td></tr></table>";
        window.DatabaseOnClick = function(s, t){
          var sheet, gview, savedData, table;
          sheet = SocialCalc.GetSpreadsheetControlObject();
          gview = sheet.views.database.element;
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          if (savedData.value === null || savedData.value === "") {
            gview.innerHTML = header_div;
          } else {
            table = new Table(null, null);
            table.Deserialize(savedData.value);
            gview.innerHTML = header_div + table.GetHTMLForm();
          }
          return;
        };
        window.SaveConfiguration = function(n){
          var savedData, table, rows, i, i$, len$, row, e;
          console.log("SAVE CONFIGURATION TABLE " + n);
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          table = new Table(null, null);
          table.Deserialize(savedData.value);
          rows = table.rows;
          table.range = document.getElementById("t" + n + ".databaseRange").value;
          i = 1;
          for (i$ = 0, len$ = rows.length; i$ < len$; ++i$) {
            row = rows[i$];
            row["data"] = document.getElementById("t" + n + ".databaseData." + i).value;
            row["header"] = document.getElementById("t" + n + ".databaseLabel." + i).value;
            e = document.getElementById("t" + n + ".databaseType." + i);
            row["vtype"] = e.options[e.selectedIndex].value;
            e = document.getElementById("t" + n + ".databasePermitted." + i);
            row["vrange"] = e.value;
            i = i + 1;
          }
          table.rows = rows;
          savedData.value = table.Serialize();
          return console.log(table.rows);
        };
        window.Save = function(){
          var savedData, sheet, loadsheet, sheetdict, table, payload, error, ref$, request;
          console.log("SAVING TO DATABASE");
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          sheet = SocialCalc.GetSpreadsheetControlObject();
          loadsheet = new LoadSheet(sheet);
          sheetdict = loadsheet.LoadSheetDict();
          if (!(savedData.value === null) && !(savedData.value === "")) {
            table = new Table(sheetdict, null);
            table.Deserialize(savedData.value);
          }
          payload = {
            name: SocialCalc._room,
            table: table.TupleSerializeWithChecker()
          };
          console.log(payload.table);
          error = true;
          error = (ref$ = payload.table.error) != null ? ref$ : false;
          request = {
            type: "POST",
            url: window.location.protocol + "//" + window.location.host + "/_database/create",
            contentType: "application/json",
            data: JSON.stringify(payload),
            success: function(response){
              return console.log("OK OK OK MYSQL OK OK OK");
            },
            error: function(response){
              return console.log("Error saving data to database");
            }
          };
          if (!error) {
            $.ajax(request);
          } else {
            console.log("ERROR VALIDATIONS");
          }
        };
        window.Synchronize = function(){
          var savedData, sheet, loadsheet, sheetdict, getLink, request;
          savedData = document.getElementById(spreadsheet.idPrefix + "databaseSavedData");
          sheet = SocialCalc.GetSpreadsheetControlObject();
          loadsheet = new LoadSheet(sheet);
          sheetdict = loadsheet.LoadSheetDict();
          getLink = function(sc, ec, sr, er){
            return "" + window.location.protocol + "//" + window.location.host + "/_framefinder/" + SocialCalc._room + "/" + sc + "/" + ec + "/" + sr + "/" + er;
          };
          request = {
            type: "GET",
            url: window.location.protocol + "//" + window.location.host + "/_hierachical/" + SocialCalc._room + "/20",
            contentType: "application/json",
            success: function(response){
              var links, clusters, raw, data, i$, len$, cluster, gview, total;
              links = [];
              clusters = [];
              raw = [];
              data = JSON.parse(response);
              for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
                cluster = data[i$];
                raw.push(getLink(cluster.sc, cluster.ec, cluster.sr, cluster.er));
                links.push($.get(getLink(cluster.sc, cluster.ec, cluster.sr, cluster.er)));
                clusters.push([cluster.sc, cluster.ec, cluster.sr, cluster.er]);
              }
              console.log(raw);
              gview = sheet.views.database.element;
              gview.innerHTML = header_div;
              total = 0;
              return $.when.apply($, links).done(function(){
                return $.each(arguments, function(i, d){
                  var data, table;
                  data = d[0];
                  if (data.length > 0) {
                    table = new Table(sheetdict, data);
                    table.SetColumnRange(parseInt(clusters[i][0]), parseInt(clusters[i][1]));
                    if (table.IsHasData()) {
                      total += 1;
                      console.log(table.Serialize());
                      savedData.value = table.Serialize();
                      return gview.innerHTML += table.GetHTMLForm(total);
                    }
                  }
                });
              });
            },
            error: function(response){
              return console.log("Error getting predicted data");
            }
          };
          $.ajax(request);
        };
      }
    });
  };
}).call(this);
